'use client';

import { useState } from 'react';
import { Modal } from '../ui/Modal';
import type { Topic, CreateTopic, UpdateTopic } from '@/lib/schemas/curriculum';
import { useCreateTopic, useUpdateTopic } from '@/lib/hooks/useTopics';
import { useLetters, type Letter } from '@/lib/hooks/useLetters';

interface TopicFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  curriculumId: string;
  topic?: Topic | null;
}

export function TopicFormModal({
  isOpen,
  onClose,
  curriculumId,
  topic,
}: TopicFormModalProps) {
  const isEdit = Boolean(topic);
  const { mutate: createTopic, isPending: isCreating } = useCreateTopic();
  const { mutate: updateTopic, isPending: isUpdating } = useUpdateTopic();
  const { letters, loading: lettersLoading } = useLetters();

  const [selectedLetter, setSelectedLetter] = useState<Letter | null>(
    topic?.metadata?.reference?.id
      ? letters.find(l => l.id === topic.metadata?.reference?.id) || null
      : null
  );

  const [selectedForm, setSelectedForm] = useState<'isolated' | 'initial' | 'medial' | 'final'>(
    (topic?.metadata?.reference?.form as 'isolated' | 'initial' | 'medial' | 'final') || 'isolated'
  );

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!selectedLetter) {
      return; // Should not happen due to form validation
    }

    // Auto-generate title and description from letter data
    const formNames = {
      isolated: { en: 'Isolated', ar: 'منفصل' },
      initial: { en: 'Initial', ar: 'أول' },
      medial: { en: 'Medial', ar: 'وسط' },
      final: { en: 'Final', ar: 'آخر' },
    };

    const titleEn = `Letter ${selectedLetter.name_english} (${formNames[selectedForm].en} Form)`;
    const titleAr = `حرف ${selectedLetter.name_arabic} (شكل ${formNames[selectedForm].ar})`;
    const formCharacter = selectedLetter.forms[selectedForm];
    const descriptionEn = `Learn the ${formNames[selectedForm].en.toLowerCase()} form of the Arabic letter ${selectedLetter.name_english}: ${formCharacter}`;
    const descriptionAr = `تعلم الشكل ${formNames[selectedForm].ar} من حرف ${selectedLetter.name_arabic}: ${formCharacter}`;

    const data: CreateTopic | UpdateTopic = {
      title: {
        en: titleEn,
        ar: titleAr,
      },
      description: {
        en: descriptionEn,
        ar: descriptionAr,
      },
      letter: {
        letter: selectedLetter.letter,
        name_english: selectedLetter.name_english,
        name_arabic: selectedLetter.name_arabic,
      },
      // sequence_number will be auto-generated by backend if not provided
    };

    if (isEdit && topic) {
      updateTopic(
        {
          curriculumId,
          topicId: topic.id,
          data: data as UpdateTopic,
        },
        {
          onSuccess: () => {
            onClose();
          },
        }
      );
    } else {
      createTopic(
        {
          curriculumId,
          data: data as CreateTopic,
        },
        {
          onSuccess: () => {
            onClose();
          },
        }
      );
    }
  };

  const handleClose = () => {
    setSelectedLetter(null);
    setSelectedForm('isolated');
    onClose();
  };

  const handleLetterSelect = (letter: Letter) => {
    setSelectedLetter(letter);
    setSelectedForm('isolated'); // Default to isolated form when changing letter
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title={isEdit ? 'Edit Topic' : 'Select Letter for New Topic'}
    >
      <form onSubmit={handleSubmit} className="p-6">
        {/* Letter Grid */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-3">
            Select an Arabic Letter *
          </label>

          {lettersLoading ? (
            <div className="flex items-center justify-center py-12">
              <div className="text-gray-500">Loading letters...</div>
            </div>
          ) : (
            <div className="grid grid-cols-7 gap-2">
              {letters.map((letter) => (
                <button
                  key={letter.id}
                  type="button"
                  onClick={() => handleLetterSelect(letter)}
                  className={`
                    aspect-square rounded-lg border-2 transition-all
                    flex flex-col items-center justify-center
                    hover:border-blue-400 hover:bg-blue-50
                    ${
                      selectedLetter?.id === letter.id
                        ? 'border-blue-600 bg-blue-100 ring-2 ring-blue-600 ring-offset-2'
                        : 'border-gray-300 bg-white'
                    }
                  `}
                >
                  <div className="text-3xl font-arabic mb-1">{letter.letter}</div>
                  <div className="text-xs text-gray-600">{letter.name_english}</div>
                </button>
              ))}
            </div>
          )}

          {!selectedLetter && (
            <p className="mt-2 text-xs text-gray-500">
              Click a letter to create a topic for teaching that letter
            </p>
          )}
        </div>

        {/* Form Selector */}
        {selectedLetter && (
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Select Letter Form
            </label>
            <div className="grid grid-cols-4 gap-2">
              <button
                type="button"
                onClick={() => setSelectedForm('isolated')}
                className={`
                  px-4 py-3 rounded-lg border-2 transition-all
                  flex flex-col items-center justify-center
                  hover:border-blue-400 hover:bg-blue-50
                  ${
                    selectedForm === 'isolated'
                      ? 'border-blue-600 bg-blue-100 ring-2 ring-blue-600 ring-offset-2'
                      : 'border-gray-300 bg-white'
                  }
                `}
              >
                <div className="text-2xl font-arabic mb-1">{selectedLetter.forms.isolated}</div>
                <div className="text-xs text-gray-600">Isolated</div>
              </button>

              <button
                type="button"
                onClick={() => setSelectedForm('initial')}
                className={`
                  px-4 py-3 rounded-lg border-2 transition-all
                  flex flex-col items-center justify-center
                  hover:border-blue-400 hover:bg-blue-50
                  ${
                    selectedForm === 'initial'
                      ? 'border-blue-600 bg-blue-100 ring-2 ring-blue-600 ring-offset-2'
                      : 'border-gray-300 bg-white'
                  }
                `}
              >
                <div className="text-2xl font-arabic mb-1">{selectedLetter.forms.initial}</div>
                <div className="text-xs text-gray-600">Initial</div>
              </button>

              <button
                type="button"
                onClick={() => setSelectedForm('medial')}
                className={`
                  px-4 py-3 rounded-lg border-2 transition-all
                  flex flex-col items-center justify-center
                  hover:border-blue-400 hover:bg-blue-50
                  ${
                    selectedForm === 'medial'
                      ? 'border-blue-600 bg-blue-100 ring-2 ring-blue-600 ring-offset-2'
                      : 'border-gray-300 bg-white'
                  }
                `}
              >
                <div className="text-2xl font-arabic mb-1">{selectedLetter.forms.medial}</div>
                <div className="text-xs text-gray-600">Medial</div>
              </button>

              <button
                type="button"
                onClick={() => setSelectedForm('final')}
                className={`
                  px-4 py-3 rounded-lg border-2 transition-all
                  flex flex-col items-center justify-center
                  hover:border-blue-400 hover:bg-blue-50
                  ${
                    selectedForm === 'final'
                      ? 'border-blue-600 bg-blue-100 ring-2 ring-blue-600 ring-offset-2'
                      : 'border-gray-300 bg-white'
                  }
                `}
              >
                <div className="text-2xl font-arabic mb-1">{selectedLetter.forms.final}</div>
                <div className="text-xs text-gray-600">Final</div>
              </button>
            </div>
            <p className="mt-2 text-xs text-gray-500">
              This topic will focus specifically on the {selectedForm} form
            </p>
          </div>
        )}

        {/* Form Actions */}
        <div className="flex justify-end gap-3 pt-4 border-t border-gray-200">
          <button
            type="button"
            onClick={handleClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={!selectedLetter || isCreating || isUpdating}
            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isCreating || isUpdating
              ? 'Creating...'
              : isEdit
              ? 'Update Topic'
              : 'Create Topic'}
          </button>
        </div>
      </form>
    </Modal>
  );
}
